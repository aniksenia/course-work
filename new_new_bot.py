import asyncio
import re
import xml.etree.ElementTree as ET
from typing import Dict

import nltk
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from nltk.corpus import wordnet
from transformers import pipeline

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ NLTK
nltk.download("wordnet")
nltk.download("omw-1.4")
nltk.download("punkt")

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ 
BOT_TOKEN = "7679561637:AAG7dtHbfTbyhlaU9ZlqHBtIB_m1vvaJAJE"

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º –∫–æ—Ä–ø—É—Å–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ TMX
TMX_FILE = "C:\\Users\\infinix\\Desktop\\it-ru (3).tmx"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
translator = pipeline("translation", model="Helsinki-NLP/opus-mt-en-ru")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –§–æ—Ä–º–∞—Ç: {user_id: last_command}
user_commands: Dict[int, str] = {}


@dp.message(Command("start"))
async def start(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/meanings - –ø–æ–∏—Å–∫ –∑–Ω–∞—á–µ–Ω–∏–π –∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ —Å–ª–æ–≤–∞\n"
        "/examples - –ø—Ä–∏–º–µ—Ä—ã —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ"
    )


def find_meanings(word: str) -> str:
    """–ù–∞—Ö–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –µ–≥–æ —Å–∏–Ω–æ–Ω–∏–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å).

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç WordNet –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Å–ª–æ–≤–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π.

    Args:
        word: –ò—Ç–∞–ª—å—è–Ω—Å–∫–æ–µ —Å–ª–æ–≤–æ, –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –¥–µ—Ñ–∏–Ω–∏—Ü–∏—è–º–∏ –∏ —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
    """
    synsets = wordnet.synsets(word, lang="ita")
    if not synsets:
        return f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ."

    result = f"–ó–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤–∞ {word}:\n"
    for i, synset in enumerate(synsets, 1):
        # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –±–µ–∑ —Å–∞–º–æ–≥–æ —Å–ª–æ–≤–∞, –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        synonyms = [lemma for lemma in synset.lemma_names("ita") if lemma != word] 
        definition = synset.definition()
        translated_def = translator(definition)[0]["translation_text"]
        
        result += f"\nüí° {i}. {translated_def}\n"
        if synonyms:
            result += f"üìù –°–∏–Ω–æ–Ω–∏–º—ã: {', '.join(synonyms)}\n"
    
    return result


def find_examples(file_path: str, word: str) -> str:
    """–ò—â–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ –∏—Ç–∞–ª–æ-—Ä—É—Å—Å–∫–æ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º –∫–æ—Ä–ø—É—Å–µ.

    Args:
        file_path: –ü—É—Ç—å –∫ TMX-—Ñ–∞–π–ª—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞.
        word: –ò—Ç–∞–ª—å—è–Ω—Å–∫–æ–µ —Å–ª–æ–≤–æ, –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø—Ä–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    Returns:
        5 –ø—Ä–∏–º–µ—Ä–æ–≤ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    """
    tree = ET.parse(file_path)
    root = tree.getroot()
    examples = []
    word_pattern = re.compile(rf"\b{re.escape(word)}\b", flags=re.IGNORECASE)

    for tu in root.findall(".//tu"):
        segments = []
        for seg in tu.findall("tuv/seg"):
            if seg.text is not None:
                segments.append(seg.text.strip())

        if len(segments) >= 2 and word_pattern.search(segments[0]):
            examples.append(f"üáÆüáπ {segments[0]}\nüá∑üá∫ {segments[1]}")
            if len(examples) >= 5:
                break

    return (
        "–ü—Ä–∏–º–µ—Ä—ã —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è:\n\n" + "\n\n".join(examples)
        if examples
        else f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ—Ä–ø—É—Å–µ."
    )


@dp.message(F.text & ~F.text.startswith("/"))
async def handle_word(message: types.Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ–±—ã —Å–ª–æ–≤–æ –Ω–µ —è–≤–ª—è–ª–æ—Å—å –∫–æ–º–∞–Ω–¥–æ–π –∏ —Å–æ—Å—Ç–æ—è–ª–æ —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤.
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–º —Å–ª–æ–≤–æ–º.
    """
    user_id = message.from_user.id
    word = message.text.strip()

    if not word.isalpha():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –Ω–∞ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–º.")
        return

    if user_id not in user_commands:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /meanings –∏–ª–∏ /examples")
        return

    response = (
        find_meanings(word)
        if user_commands[user_id] == "/meanings"
        else find_examples(TMX_FILE, word)
    )
    
    await message.answer(response)
    user_commands.pop(user_id, None)  # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è


@dp.message(Command("meanings"))
async def meanings_cmd(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /meanings.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–æ–≤–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_commands[message.from_user.id] = "/meanings"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π:")


@dp.message(Command("examples"))
async def examples_cmd(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /examples.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–æ–≤–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_commands[message.from_user.id] = "/examples"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤:")


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())